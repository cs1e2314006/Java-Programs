package Multithreading;

class MyDatas{
	int value;
	boolean flag=false;
	synchronized void set(int value) throws InterruptedException {
		while(flag!=true)wait();
		this.value=value;
		flag=true;
		notify();
	}
	
	synchronized int get() throws InterruptedException {
		while(flag!=false)wait();
			
		flag=false;
		notify();
		return this.value;
		
	}
}

class Producer extends Thread{
	MyDatas data;
	int count=0;
	public Producer(MyDatas d1) {
		data=d1;
	}
	public void run() {
		int count=1;
		while(true) {
			try {
				data.set(count);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			count++;
		}
	}
	
}
class Consumer extends Thread{
	MyDatas datas;
	public Consumer(MyDatas d){
		datas=d;
	}
	public void run() {
		try {
			System.out.println(datas.get());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}


public class InterProcess{
	public static void main(String[] args) {
	MyDatas data=new MyDatas();
	Producer producer=new Producer(data);
	Consumer consumer= new Consumer(data);
	producer.start();
	consumer.start();
	}
}